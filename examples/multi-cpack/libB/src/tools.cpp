#include "libB/tools.h"
#include "libA/core.h"
#include "libA/utils.h"
#include <iostream>
#include <sstream>
#include <fstream>

namespace libB {

std::vector<Tools::Config> Tools::loadConfiguration(const std::string& path) {
    std::vector<Config> configs;
    std::ifstream file(path);
    
    if (!file.is_open()) {
        std::cerr << "Could not open config file: " << path << "\n";
        return configs;
    }
    
    std::string line;
    while (std::getline(file, line)) {
        auto parts = libA::Utils::split(line, "=");
        if (parts.size() == 2) {
            Config cfg;
            cfg.name = parts[0];
            cfg.value = parts[1];
            cfg.enabled = true;
            configs.push_back(cfg);
        }
    }
    
    return configs;
}

bool Tools::saveConfiguration(const std::string& path, const std::vector<Config>& configs) {
    std::ofstream file(path);
    
    if (!file.is_open()) {
        std::cerr << "Could not create config file: " << path << "\n";
        return false;
    }
    
    for (const auto& cfg : configs) {
        if (cfg.enabled) {
            file << cfg.name << "=" << cfg.value << "\n";
        }
    }
    
    return true;
}

void Tools::printDiagnostics() {
    std::cout << "=== LibB Tools Diagnostics ===\n";
    std::cout << "Version: 2.0.0\n";
    std::cout << "Dependencies: LibA " << libA::Core().getVersion() << "\n";
    std::cout << "Status: Operational\n";
    std::cout << "==============================\n";
}

std::string Tools::generateReport(const std::vector<std::string>& data) {
    std::stringstream report;
    report << "=== Report Generated by LibB Tools ===\n";
    report << "Total items: " << data.size() << "\n";
    report << "Items:\n";
    
    for (size_t i = 0; i < data.size(); ++i) {
        report << "  [" << i + 1 << "] " << libA::Utils::toUpper(data[i]) << "\n";
    }
    
    report << "Summary: " << libA::Utils::join(data, " | ") << "\n";
    report << "=====================================\n";
    
    return report.str();
}

} // namespace libB
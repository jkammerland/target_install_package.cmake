#!/bin/bash

# Container runtime helper script
# Generated by CMake

PROJECT_NAME="container_dynamic"
PROJECT_VERSION="@PROJECT_VERSION@"
CONTAINER_TOOL="@CONTAINER_TOOL_NAME@"
BUILD_DIR="@CMAKE_BINARY_DIR@"

cd "$BUILD_DIR" || exit 1

echo "=== Container Runtime Manager ==="
echo "Project: $PROJECT_NAME v$PROJECT_VERSION"
echo "Tool: $CONTAINER_TOOL"
echo ""

case "$1" in
    start)
        echo "Starting containers..."
        ${CONTAINER_TOOL}-compose up -d
        echo ""
        echo "Container status:"
        ${CONTAINER_TOOL}-compose ps
        ;;
    
    stop)
        echo "Stopping containers..."
        ${CONTAINER_TOOL}-compose down
        ;;
    
    restart)
        echo "Restarting containers..."
        ${CONTAINER_TOOL}-compose restart
        ;;
    
    logs)
        shift
        if [ -n "$1" ]; then
            ${CONTAINER_TOOL}-compose logs -f "$1"
        else
            ${CONTAINER_TOOL}-compose logs -f
        fi
        ;;
    
    status)
        echo "Container status:"
        ${CONTAINER_TOOL}-compose ps
        echo ""
        echo "Library mounts (checking memory sharing):"
        for app in app1 app2 app3; do
            if ${CONTAINER_TOOL} ps --format "{{.Names}}" | grep -q "${PROJECT_NAME}-$app"; then
                echo "  $app:"
                ${CONTAINER_TOOL} exec ${PROJECT_NAME}-$app ls -la /usr/local/lib 2>/dev/null | head -3
            fi
        done
        ;;
    
    verify-sharing)
        echo "Verifying library memory sharing..."
        echo ""
        
        # Check if libs container is running
        if ! ${CONTAINER_TOOL} ps --format "{{.Names}}" | grep -q "${PROJECT_NAME}-libs"; then
            echo "ERROR: libs container not running"
            exit 1
        fi
        
        # Get inode of a library from libs container
        LIB_INODE=$(${CONTAINER_TOOL} exec ${PROJECT_NAME}-libs ls -i /lib*/libshared_utils.so* 2>/dev/null | awk '{print $1}' | head -1)
        
        if [ -z "$LIB_INODE" ]; then
            echo "WARNING: Could not find shared library in libs container"
        else
            echo "Library inode in libs container: $LIB_INODE"
            echo ""
            
            # Check inode in each app container
            for app in app1 app2 app3; do
                if ${CONTAINER_TOOL} ps --format "{{.Names}}" | grep -q "${PROJECT_NAME}-$app"; then
                    APP_INODE=$(${CONTAINER_TOOL} exec ${PROJECT_NAME}-$app ls -i /usr/local/lib*/libshared_utils.so* 2>/dev/null | awk '{print $1}' | head -1)
                    if [ "$APP_INODE" = "$LIB_INODE" ]; then
                        echo "✓ $app: Same inode ($APP_INODE) - Memory IS shared"
                    else
                        echo "✗ $app: Different inode ($APP_INODE) - Memory NOT shared"
                    fi
                else
                    echo "- $app: Not running"
                fi
            done
        fi
        ;;
    
    exec)
        shift
        if [ -n "$1" ]; then
            CONTAINER="$1"
            shift
            ${CONTAINER_TOOL} exec -it ${PROJECT_NAME}-${CONTAINER} "$@"
        else
            echo "Usage: $0 exec <container> [command]"
            echo "Containers: libs, app1, app2, app3"
        fi
        ;;
    
    clean)
        echo "Cleaning up containers and volumes..."
        ${CONTAINER_TOOL}-compose down -v
        echo "Removing container images..."
        ${CONTAINER_TOOL} rmi ${PROJECT_NAME}-libs:${PROJECT_VERSION} 2>/dev/null
        ${CONTAINER_TOOL} rmi ${PROJECT_NAME}-apps:${PROJECT_VERSION} 2>/dev/null
        echo "Cleanup complete"
        ;;
    
    *)
        echo "Usage: $0 {start|stop|restart|logs|status|verify-sharing|exec|clean}"
        echo ""
        echo "Commands:"
        echo "  start          - Start all containers"
        echo "  stop           - Stop all containers"
        echo "  restart        - Restart all containers"
        echo "  logs [service] - Show logs (follow mode)"
        echo "  status         - Show container status"
        echo "  verify-sharing - Verify library memory sharing"
        echo "  exec <svc> ... - Execute command in container"
        echo "  clean          - Remove containers and images"
        exit 1
        ;;
esac
#!/bin/bash
# Example Package Verification Script for @PROJECT_NAME@ v@PROJECT_VERSION@
# 
# NOTICE: This is an EXAMPLE verification script template that demonstrates
# how consumers could verify GPG-signed packages. You should customize this
# script for your specific needs and security requirements.
#
# Usage: verify.sh [OPTIONS]

# Configuration from build - these would be provided by the package publisher
DEFAULT_SIGNING_KEY="@GPG_SIGNING_KEY@"
DEFAULT_KEYSERVER="keyserver.ubuntu.com"
GENERATE_CHECKSUMS="@GENERATE_CHECKSUMS@"

# Default values
PACKAGE_TYPES="rpm,deb,tar.gz,zip,pkg,dmg,msi"
DIRECTORY="."
MIN_PACKAGES=1
SIGNING_KEY="$DEFAULT_SIGNING_KEY"
KEYSERVER="$DEFAULT_KEYSERVER"
VERBOSE=false

# Package type extensions mapping using functions for cross-platform compatibility
get_extensions() {
    case "$1" in
        rpm) echo "*.rpm" ;;
        deb) echo "*.deb" ;;
        tar.gz) echo "*.tar.gz *.tgz" ;;
        zip) echo "*.zip" ;;
        pkg) echo "*.pkg" ;;
        dmg) echo "*.dmg" ;;
        msi) echo "*.msi" ;;
        *) echo "" ;;
    esac
}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

usage() {
    cat << EOF
Usage: $0 [OPTIONS]

EXAMPLE verification script for GPG-signed packages.
‚ö†Ô∏è  IMPORTANT: This is a template - customize for your security requirements!

OPTIONS:
    --package-types TYPES    Comma-separated list: rpm,deb,tar.gz,zip,pkg,dmg,msi (default: all)
    --directory DIR          Directory to search for packages (default: current)
    --min-packages N         Minimum packages that must verify successfully (default: 1)
    --key-id KEYID          Expected GPG key ID for validation (default: from build)
    --keyserver URL         Keyserver for key import (default: keyserver.ubuntu.com)
    --verbose               Enable verbose output
    --help                  Show this help message

EXAMPLES:
    $0                                           # Verify all packages in current directory
    $0 --package-types rpm,deb                  # Verify only RPM and DEB packages
    $0 --directory ../build --min-packages 3    # Require at least 3 packages
    $0 --verbose                                 # Show detailed verification output

EXIT CODES:
    0    Success: minimum packages verified
    1    Failure: below minimum threshold or verification errors
    2    Usage error: invalid arguments

SECURITY NOTES:
    - Always verify the publisher's GPG key fingerprint through a secure channel
    - Consider pinning specific key IDs rather than using email addresses
    - Validate that keyservers are trustworthy for your environment
    - This script is provided as an example - audit before production use
EOF
}

log() {
    if [ "$VERBOSE" = "true" ]; then
        echo "$@" >&2
    fi
}

error() {
    echo -e "${RED}ERROR: $*${NC}" >&2
}

success() {
    echo -e "${GREEN}‚úì $*${NC}"
}

warning() {
    echo -e "${YELLOW}‚ö† $*${NC}" >&2
}

# Parse command line arguments
while [ $# -gt 0 ]; do
    case $1 in
        --package-types)
            PACKAGE_TYPES="$2"
            shift 2
            ;;
        --directory)
            DIRECTORY="$2"
            shift 2
            ;;
        --min-packages)
            MIN_PACKAGES="$2"
            shift 2
            ;;
        --key-id)
            SIGNING_KEY="$2"
            shift 2
            ;;
        --keyserver)
            KEYSERVER="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            error "Unknown option: $1"
            usage
            exit 2
            ;;
    esac
done

# Validate arguments
if [ ! -d "$DIRECTORY" ]; then
    error "Directory does not exist: $DIRECTORY"
    exit 2
fi

if ! echo "$MIN_PACKAGES" | grep -q '^[0-9]\+$' || [ "$MIN_PACKAGES" -lt 1 ]; then
    error "Invalid minimum packages count: $MIN_PACKAGES"
    exit 2
fi

log "Configuration:"
log "  Package types: $PACKAGE_TYPES"
log "  Directory: $DIRECTORY"
log "  Min packages: $MIN_PACKAGES"
log "  Signing key: $SIGNING_KEY"
log "  Keyserver: $KEYSERVER"

# Find packages
find_packages() {
    local found_packages=""
    
    # Convert comma-separated list to space-separated
    types=$(echo "$PACKAGE_TYPES" | tr ',' ' ')
    
    for type in $types; do
        extensions=$(get_extensions "$type")
        if [ -n "$extensions" ]; then
            log "Searching for $type packages..."
            # Process each pattern
            for pattern in $extensions; do
                for file in "$DIRECTORY"/$pattern; do
                    if [ -f "$file" ]; then
                        found_packages="$found_packages${found_packages:+ }$file"
                    fi
                done
            done
        else
            warning "Unknown package type: $type"
        fi
    done
    
    echo "$found_packages" | tr ' ' '\n' | sort -u
}

# Cross-platform checksum verification
verify_checksum_file() {
    local package_file="$1"
    local checksum_file="$2"
    local hash_type="$3"
    
    # Read expected checksum from file
    local expected_hash
    expected_hash=$(cut -d' ' -f1 "$checksum_file" 2>/dev/null)
    if [ -z "$expected_hash" ]; then
        log "Cannot read checksum from $checksum_file"
        return 1
    fi
    
    # Calculate actual checksum using platform-appropriate method
    local actual_hash
    case "$hash_type" in
        sha256)
            if command -v sha256sum >/dev/null 2>&1; then
                actual_hash=$(sha256sum "$package_file" | cut -d' ' -f1)
            elif command -v shasum >/dev/null 2>&1; then
                actual_hash=$(shasum -a 256 "$package_file" | cut -d' ' -f1)
            elif command -v openssl >/dev/null 2>&1; then
                actual_hash=$(openssl dgst -sha256 "$package_file" | cut -d' ' -f2)
            else
                log "No SHA256 tool available (tried sha256sum, shasum, openssl)"
                return 1
            fi
            ;;
        sha512)
            if command -v sha512sum >/dev/null 2>&1; then
                actual_hash=$(sha512sum "$package_file" | cut -d' ' -f1)
            elif command -v shasum >/dev/null 2>&1; then
                actual_hash=$(shasum -a 512 "$package_file" | cut -d' ' -f1)
            elif command -v openssl >/dev/null 2>&1; then
                actual_hash=$(openssl dgst -sha512 "$package_file" | cut -d' ' -f2)
            else
                log "No SHA512 tool available (tried sha512sum, shasum, openssl)"
                return 1
            fi
            ;;
        *)
            log "Unknown hash type: $hash_type"
            return 1
            ;;
    esac
    
    # Compare hashes (case-insensitive)
    if [ "$(echo "$expected_hash" | tr '[:upper:]' '[:lower:]')" = "$(echo "$actual_hash" | tr '[:upper:]' '[:lower:]')" ]; then
        return 0
    else
        log "Checksum mismatch: expected $expected_hash, got $actual_hash"
        return 1
    fi
}

# Import GPG key
import_key() {
    if [ -n "$SIGNING_KEY" ] && [ -n "$KEYSERVER" ]; then
        log "Importing GPG key: $SIGNING_KEY"
        if ! gpg --keyserver "$KEYSERVER" --recv-keys "$SIGNING_KEY" 2>/dev/null; then
            log "Key import failed (key may already exist)"
        fi
    fi
}

# Verify a single package
verify_package() {
    local package="$1"
    local basename=$(basename "$package")
    local verified=false
    
    log "Verifying: $basename"
    
    # Check if signature file exists
    if [ ! -f "$package.sig" ]; then
        warning "$basename.sig not found"
        return 1
    fi
    
    # Verify GPG signature
    if gpg --verify "$package.sig" "$package" 2>/dev/null; then
        log "GPG signature verified for $basename"
        verified=true
    else
        error "GPG signature verification failed for $basename"
        return 1
    fi
    
    # Verify checksums if available
    if [ "$GENERATE_CHECKSUMS" = "TRUE" ]; then
        if [ -f "$package.sha256" ]; then
            if verify_checksum_file "$package" "$package.sha256" "sha256"; then
                log "SHA256 checksum verified for $basename"
            else
                error "SHA256 checksum verification failed for $basename"
                return 1
            fi
        fi
        
        if [ -f "$package.sha512" ]; then
            if verify_checksum_file "$package" "$package.sha512" "sha512"; then
                log "SHA512 checksum verified for $basename"
            else
                error "SHA512 checksum verification failed for $basename"
                return 1
            fi
        fi
    fi
    
    if [ "$verified" = "true" ]; then
        success "$(basename "$package") verified successfully"
        return 0
    fi
    
    return 1
}

# Main verification function
main() {
    local packages
    local verified_count=0
    local total_count=0
    
    echo "üîê Example Package Verification Script"
    echo "‚ö†Ô∏è  NOTICE: This is a demonstration template - customize for production use!"
    echo ""
    
    # Import key first
    import_key
    
    # Find packages - use POSIX-compatible approach
    packages_list=$(find_packages)
    if [ -n "$packages_list" ]; then
        # Count packages by converting to array manually
        set -- $packages_list
        total_count=$#
        # Store in a way we can iterate
        packages="$packages_list"
    else
        total_count=0
        packages=""
    fi
    
    if [ $total_count -eq 0 ]; then
        error "No packages found in $DIRECTORY matching types: $PACKAGE_TYPES"
        exit 1
    fi
    
    log "Found $total_count package(s) to verify"
    
    # Verify each package
    for package in $packages; do
        if verify_package "$package"; then
            verified_count=$((verified_count + 1))
        fi
    done
    
    # Report results
    echo ""
    echo "Verification Results:"
    echo "  Total packages: $total_count"
    echo "  Successfully verified: $verified_count"
    echo "  Required minimum: $MIN_PACKAGES"
    
    if [ $verified_count -ge $MIN_PACKAGES ]; then
        success "Verification completed successfully ($verified_count/$total_count packages verified)"
        echo ""
        echo "üéâ Package verification successful!"
        echo "üìù Remember: This is an example script - adapt for your security requirements"
        exit 0
    else
        error "Verification failed: only $verified_count/$total_count packages verified (minimum: $MIN_PACKAGES)"
        echo ""
        echo "‚ùå Package verification failed"
        echo "üìù Check signatures, checksums, and GPG key trust"
        exit 1
    fi
}

# Run main function
main "$@"
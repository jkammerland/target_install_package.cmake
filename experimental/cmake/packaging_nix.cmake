# Nix specific packaging functions

include(${CMAKE_CURRENT_LIST_DIR}/packaging_utils.cmake)

# ~~~
# Generate Nix packaging templates
#
# This is the main entry point for Nix packaging generation.
# ~~~
function(generate_nix_packaging_templates output_dir components source_packages binary_packages)
  message(STATUS "Generating Nix templates...")
  
  # Create nix-specific directory
  set(nix_dir "${output_dir}/nix")
  file(MAKE_DIRECTORY "${nix_dir}")
  
  # Get universal and nix-specific metadata
  get_property(metadata GLOBAL PROPERTY "_UNIVERSAL_PACKAGING_METADATA")
  get_property(nix_config GLOBAL PROPERTY "_UNIVERSAL_PACKAGING_NIX_CONFIG")
  
  # Parse nix config to check for flake
  _extract_from_key_value_list(nix_config "FLAKE_ENABLED" is_flake)
  
  # Create Nix expression templates
  if(source_packages)
    _create_nix_expressions("${nix_dir}" "${components}" "${metadata}" "${nix_config}" FALSE)
  endif()
  
  if(binary_packages)
    _create_nix_expressions("${nix_dir}" "${components}" "${metadata}" "${nix_config}" TRUE)
  endif()
  
  # Create helper scripts
  _create_platform_helper_scripts("nix" "${nix_dir}")
endfunction()

# ~~~
# Create Nix expressions (both default.nix and flake.nix if enabled)
# ~~~
function(_create_nix_expressions output_dir components metadata nix_config is_binary)
  # Parse nix config
  _parse_key_value_list(nix_config "NIX_")
  
  # Check if flake is enabled
  if(NIX_FLAKE_ENABLED)
    _create_nix_flake("${output_dir}" "${components}" "${metadata}" "${nix_config}" ${is_binary})
    # Also create default.nix since flake.nix references it
    _create_nix_default("${output_dir}" "${components}" "${metadata}" "${nix_config}" ${is_binary})
  else()
    _create_nix_default("${output_dir}" "${components}" "${metadata}" "${nix_config}" ${is_binary})
  endif()
endfunction()

# ~~~
# Create default.nix file
# ~~~
function(_create_nix_default output_dir components metadata nix_config is_binary)
  # Parse metadata into variables
  _parse_key_value_list(metadata "")
  
  # Determine filename
  if(is_binary)
    set(filename "${output_dir}/default-binary.nix")
  else()
    set(filename "${output_dir}/default.nix")
  endif()
  
  # Build platform-specific variables
  set(platform_vars)
  
  # Build input header
  set(build_input_header "# Generated by CMake target_configure_universal_packaging
{ stdenv, lib, fetchurl, cmake")
  
  if(NIX_BUILD_INPUTS)
    set(build_input_header "${build_input_header}, ${NIX_BUILD_INPUTS}")
  endif()
  
  if(NIX_NATIVE_BUILD_INPUTS)
    set(build_input_header "${build_input_header}, ${NIX_NATIVE_BUILD_INPUTS}")
  endif()
  
  set(build_input_header "${build_input_header} }:")
  list(APPEND platform_vars "NIX_BUILD_INPUT_HEADER=${build_input_header}")
  
  # Source section
  if(NOT is_binary AND SOURCE_URL)
    set(source_section "  src = fetchurl {
    url = \"${SOURCE_URL}\";
    sha256 = \"0000000000000000000000000000000000000000000000000000\";  # Replace with actual hash
  };")
  else()
    set(source_section "  # Binary package - customize source as needed
  src = ./.;")
  endif()
  list(APPEND platform_vars "NIX_SOURCE_SECTION=${source_section}")
  
  # Build inputs
  if(NIX_BUILD_INPUTS)
    set(build_inputs_line "  buildInputs = [ ${NIX_BUILD_INPUTS} ];")
  else()
    set(build_inputs_line "")
  endif()
  list(APPEND platform_vars "NIX_BUILD_INPUTS_LINE=${build_inputs_line}")
  
  # Native build inputs
  if(NIX_NATIVE_BUILD_INPUTS)
    set(native_build_inputs_line "  nativeBuildInputs = [ cmake ${NIX_NATIVE_BUILD_INPUTS} ];")
  else()
    set(native_build_inputs_line "  nativeBuildInputs = [ cmake ];")
  endif()
  list(APPEND platform_vars "NIX_NATIVE_BUILD_INPUTS_LINE=${native_build_inputs_line}")
  
  # Propagated build inputs
  if(NIX_PROPAGATED_BUILD_INPUTS)
    set(propagated_build_inputs_line "  propagatedBuildInputs = [ ${NIX_PROPAGATED_BUILD_INPUTS} ];")
  else()
    set(propagated_build_inputs_line "")
  endif()
  list(APPEND platform_vars "NIX_PROPAGATED_BUILD_INPUTS_LINE=${propagated_build_inputs_line}")
  
  # Custom phases
  if(NIX_CUSTOM_CONFIGURE_PHASE)
    set(configure_phase "  configurePhase = ''
    ${NIX_CUSTOM_CONFIGURE_PHASE}
  '';")
  else()
    set(configure_phase "")
  endif()
  list(APPEND platform_vars "NIX_CONFIGURE_PHASE=${configure_phase}")
  
  if(NIX_CUSTOM_BUILD_PHASE)
    set(build_phase "  buildPhase = ''
    ${NIX_CUSTOM_BUILD_PHASE}
  '';")
  else()
    set(build_phase "")
  endif()
  list(APPEND platform_vars "NIX_BUILD_PHASE=${build_phase}")
  
  if(NIX_CUSTOM_INSTALL_PHASE)
    set(install_phase "  installPhase = ''
    ${NIX_CUSTOM_INSTALL_PHASE}
  '';")
  else()
    set(install_phase "")
  endif()
  list(APPEND platform_vars "NIX_INSTALL_PHASE=${install_phase}")
  
  # Build complete substitution map
  _build_substitution_map(substitutions "${metadata}" "${platform_vars}" "")
  
  # Process template
  _process_template_file("nix/default.nix.in" "${filename}" "${substitutions}")
  
  message(STATUS "Created Nix expression template: ${filename}")
endfunction()

# ~~~
# Create flake.nix file
# ~~~
function(_create_nix_flake output_dir components metadata nix_config is_binary)
  # Parse metadata into variables
  _parse_key_value_list(metadata "")
  
  # Determine filename
  if(is_binary)
    set(filename "${output_dir}/flake-binary.nix")
  else()
    set(filename "${output_dir}/flake.nix")
  endif()
  
  # Build platform-specific variables
  set(platform_vars)
  
  # Development shell inputs
  if(NIX_NATIVE_BUILD_INPUTS)
    string(REPLACE " " "\n            " native_build_inputs_str "${NIX_NATIVE_BUILD_INPUTS}")
    set(dev_shell_inputs "\n            ${native_build_inputs_str}")
  else()
    set(dev_shell_inputs "")
  endif()
  list(APPEND platform_vars "NIX_DEV_SHELL_INPUTS=${dev_shell_inputs}")
  
  # Build complete substitution map
  _build_substitution_map(substitutions "${metadata}" "${platform_vars}" "")
  
  # Process template
  _process_template_file("nix/flake.nix.in" "${filename}" "${substitutions}")
  
  message(STATUS "Created Nix flake template: ${filename}")
endfunction()

# ~~~
# Platform configuration for Nix
# ~~~
function(_get_nix_platform_config output_var)
  set(config
    "NAME" "nix"
    "DISPLAY_NAME" "Nix"
    "TEMPLATE_DIR" "nix"
    "PACKAGE_FILE" "default.nix"
    "HELPER_SCRIPTS" "build.sh;clean.sh;install.sh"
    "DEFAULT_ARCH" "all"
    "DEPENDS_FORMAT" "space"
    "FILE_EXTENSIONS" ""
    "SUPPORTS_FLAKE" "TRUE"
  )
  set(${output_var} "${config}" PARENT_SCOPE)
endfunction()
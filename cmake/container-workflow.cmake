cmake_minimum_required(VERSION 3.23)

get_property(
  _LFG_INITIALIZED GLOBAL
  PROPERTY "list_file_include_guard_cmake_INITIALIZED"
  SET)
if(_LFG_INITIALIZED)
  list_file_include_guard(VERSION 5.6.2)
else()
  message(VERBOSE "including <${CMAKE_CURRENT_FUNCTION_LIST_FILE}>, without list_file_include_guard")
endif()

# Ensure project_log is available (simple fallback if not defined elsewhere)
if(NOT COMMAND project_log)
  function(project_log level)
    set(msg "")
    if(ARGV)
      list(REMOVE_AT ARGV 0)
      string(JOIN " " msg ${ARGV})
    endif()
    message(${level} "[container-workflow][${level}] ${msg}")
  endfunction()
endif()

# ~~~
# Generate container information files for external tooling.
#
# This function creates property files and informational output to help
# external scripts and CI/CD systems work with CPack-generated containers.
# It does NOT generate containers directly - that remains the responsibility
# of external tooling.
#
# API:
#   container_workflow_info(
#     [PROJECT_NAME name]
#     [VERSION version] 
#     [COMPONENTS component1 component2 ...]
#     [INSTALL_PREFIX prefix]
#     [OUTPUT_DIR directory]
#     [CONTAINER_TOOL tool]
#   )
#
# Parameters:
#   PROJECT_NAME    - Name for the container (default: ${PROJECT_NAME})
#   VERSION         - Version tag (default: ${PROJECT_VERSION})
#   COMPONENTS      - List of components that will be packaged
#   INSTALL_PREFIX  - Install prefix used (default: ${CMAKE_INSTALL_PREFIX})
#   OUTPUT_DIR      - Where to write info files (default: ${CMAKE_BINARY_DIR})
#   CONTAINER_TOOL  - Preferred container tool (default: podman)
#
# Generated Files:
#   container.properties     - Key-value properties for scripts
#   container-commands.sh    - Example import commands
#   container-manifest.json  - Basic OCI manifest template
# ~~~
function(container_workflow_info)
  set(oneValueArgs PROJECT_NAME VERSION INSTALL_PREFIX OUTPUT_DIR CONTAINER_TOOL)
  set(multiValueArgs COMPONENTS)
  cmake_parse_arguments(CWI "" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
  
  # Set defaults
  if(NOT CWI_PROJECT_NAME)
    set(CWI_PROJECT_NAME "${PROJECT_NAME}")
  endif()
  
  if(NOT CWI_VERSION)
    set(CWI_VERSION "${PROJECT_VERSION}")
  endif()
  
  if(NOT CWI_INSTALL_PREFIX)
    set(CWI_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}")
  endif()
  
  if(NOT CWI_OUTPUT_DIR)
    set(CWI_OUTPUT_DIR "${CMAKE_BINARY_DIR}")
  endif()
  
  if(NOT CWI_CONTAINER_TOOL)
    set(CWI_CONTAINER_TOOL "podman")
  endif()
  
  # Auto-detect components if not specified
  if(NOT CWI_COMPONENTS)
    get_property(detected_components GLOBAL PROPERTY CPACK_COMPONENTS_ALL)
    if(detected_components)
      set(CWI_COMPONENTS ${detected_components})
    else()
      set(CWI_COMPONENTS "Runtime")
    endif()
  endif()
  
  project_log(STATUS "Generating container workflow information")
  project_log(STATUS "  Project: ${CWI_PROJECT_NAME}")
  project_log(STATUS "  Version: ${CWI_VERSION}")
  project_log(STATUS "  Components: ${CWI_COMPONENTS}")
  project_log(STATUS "  Install prefix: ${CWI_INSTALL_PREFIX}")
  project_log(STATUS "  Output directory: ${CWI_OUTPUT_DIR}")
  
  # Generate container.properties
  set(PROPERTIES_FILE "${CWI_OUTPUT_DIR}/container.properties")
  file(WRITE "${PROPERTIES_FILE}"
    "# Container workflow properties - generated by CMake\n"
    "PROJECT_NAME=${CWI_PROJECT_NAME}\n"
    "VERSION=${CWI_VERSION}\n"
    "INSTALL_PREFIX=${CWI_INSTALL_PREFIX}\n"
    "CONTAINER_TOOL=${CWI_CONTAINER_TOOL}\n"
    "COMPONENTS=${CWI_COMPONENTS}\n"
    "BUILD_DIR=${CMAKE_BINARY_DIR}\n"
    "SOURCE_DIR=${CMAKE_SOURCE_DIR}\n"
    "GENERATOR=${CMAKE_GENERATOR}\n"
    "BUILD_TYPE=${CMAKE_BUILD_TYPE}\n"
  )
  
  # Generate example import commands
  set(COMMANDS_FILE "${CWI_OUTPUT_DIR}/container-commands.sh")
  file(WRITE "${COMMANDS_FILE}"
    "#!/bin/bash\n"
    "# Container import commands - generated by CMake\n"
    "# These are examples - modify according to your needs\n\n"
    "set -e\n\n"
    "CONTAINER_TOOL=\"${CWI_CONTAINER_TOOL}\"\n"
    "PROJECT_NAME=\"${CWI_PROJECT_NAME}\"\n"
    "VERSION=\"${CWI_VERSION}\"\n"
    "BUILD_DIR=\"${CMAKE_BINARY_DIR}\"\n\n"
  )
  
  # Add import commands for each component
  foreach(component ${CWI_COMPONENTS})
    string(TOLOWER "${component}" component_lower)
    
    file(APPEND "${COMMANDS_FILE}"
      "# Import ${component} component\n"
      "echo \"Importing ${component} component...\"\n"
      "${component_upper}_TARBALL=\\$(find \"\\$BUILD_DIR\" -name \"*-${component}.tar.gz\" | head -n1)\n"
      "if [[ -n \"\\$${component_upper}_TARBALL\" ]]; then\n"
    )
    
    # Component-specific container configuration
    if(component STREQUAL "Runtime")
      file(APPEND "${COMMANDS_FILE}"
        "  \\$CONTAINER_TOOL import \\\\\n"
        "    --change \"CMD ['${CWI_INSTALL_PREFIX}/bin/${CWI_PROJECT_NAME}']\" \\\\\n"
        "    --change \"WORKDIR ${CWI_INSTALL_PREFIX}\" \\\\\n"
        "    --change \"ENV LD_LIBRARY_PATH=${CWI_INSTALL_PREFIX}/lib\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.title=${CWI_PROJECT_NAME}\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.version=${CWI_VERSION}\" \\\\\n"
        "    \"\\$${component_upper}_TARBALL\" \\\\\n"
        "    \"${CWI_PROJECT_NAME}:runtime\"\n"
        "  echo \"Created: ${CWI_PROJECT_NAME}:runtime\"\n"
      )
    elseif(component STREQUAL "Development")
      file(APPEND "${COMMANDS_FILE}"
        "  \\$CONTAINER_TOOL import \\\\\n"
        "    --change \"CMD ['/bin/sh']\" \\\\\n"
        "    --change \"WORKDIR ${CWI_INSTALL_PREFIX}\" \\\\\n"
        "    --change \"ENV LD_LIBRARY_PATH=${CWI_INSTALL_PREFIX}/lib\" \\\\\n"
        "    --change \"ENV PKG_CONFIG_PATH=${CWI_INSTALL_PREFIX}/lib/pkgconfig\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.title=${CWI_PROJECT_NAME}-dev\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.version=${CWI_VERSION}\" \\\\\n"
        "    \"\\$${component_upper}_TARBALL\" \\\\\n"
        "    \"${CWI_PROJECT_NAME}:devel\"\n"
        "  echo \"Created: ${CWI_PROJECT_NAME}:devel\"\n"
      )
    elseif(component STREQUAL "Tools")
      file(APPEND "${COMMANDS_FILE}"
        "  \\$CONTAINER_TOOL import \\\\\n"
        "    --change \"CMD ['${CWI_INSTALL_PREFIX}/bin/${CWI_PROJECT_NAME}_tool']\" \\\\\n"
        "    --change \"WORKDIR ${CWI_INSTALL_PREFIX}\" \\\\\n"
        "    --change \"ENV LD_LIBRARY_PATH=${CWI_INSTALL_PREFIX}/lib\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.title=${CWI_PROJECT_NAME}-tools\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.version=${CWI_VERSION}\" \\\\\n"
        "    \"\\$${component_upper}_TARBALL\" \\\\\n"
        "    \"${CWI_PROJECT_NAME}:tools\"\n"
        "  echo \"Created: ${CWI_PROJECT_NAME}:tools\"\n"
      )
    else()
      file(APPEND "${COMMANDS_FILE}"
        "  \\$CONTAINER_TOOL import \\\\\n"
        "    --change \"WORKDIR ${CWI_INSTALL_PREFIX}\" \\\\\n"
        "    --change \"ENV LD_LIBRARY_PATH=${CWI_INSTALL_PREFIX}/lib\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.title=${CWI_PROJECT_NAME}-${component_lower}\" \\\\\n"
        "    --change \"LABEL org.opencontainers.image.version=${CWI_VERSION}\" \\\\\n"
        "    \"\\$${component_upper}_TARBALL\" \\\\\n"
        "    \"${CWI_PROJECT_NAME}:${component_lower}\"\n"
        "  echo \"Created: ${CWI_PROJECT_NAME}:${component_lower}\"\n"
      )
    endif()
    
    file(APPEND "${COMMANDS_FILE}"
      "else\n"
      "  echo \"Warning: No tarball found for ${component} component\"\n"
      "fi\n\n"
    )
  endforeach()
  
  file(APPEND "${COMMANDS_FILE}"
    "echo \"Container import complete!\"\n"
    "echo \"Test your containers:\"\n"
  )
  
  foreach(component ${CWI_COMPONENTS})
    string(TOLOWER "${component}" component_lower)
    if(component STREQUAL "Runtime")
      file(APPEND "${COMMANDS_FILE}"
        "echo \"  \\$CONTAINER_TOOL run --rm ${CWI_PROJECT_NAME}:runtime\"\n"
      )
    elseif(component STREQUAL "Development")
      file(APPEND "${COMMANDS_FILE}"
        "echo \"  \\$CONTAINER_TOOL run --rm -it ${CWI_PROJECT_NAME}:devel\"\n"
      )
    elseif(component STREQUAL "Tools")
      file(APPEND "${COMMANDS_FILE}"
        "echo \"  \\$CONTAINER_TOOL run --rm ${CWI_PROJECT_NAME}:tools\"\n"
      )
    else()
      file(APPEND "${COMMANDS_FILE}"
        "echo \"  \\$CONTAINER_TOOL run --rm ${CWI_PROJECT_NAME}:${component_lower}\"\n"
      )
    endif()
  endforeach()
  
  # Make the commands file executable
  file(COPY "${COMMANDS_FILE}" DESTINATION "${CWI_OUTPUT_DIR}"
    FILE_PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE)
  
  # Generate basic OCI manifest template
  set(MANIFEST_FILE "${CWI_OUTPUT_DIR}/container-manifest.json")
  file(WRITE "${MANIFEST_FILE}"
    "{\n"
    "  \"schemaVersion\": 2,\n"
    "  \"mediaType\": \"application/vnd.oci.image.manifest.v1+json\",\n"
    "  \"config\": {\n"
    "    \"mediaType\": \"application/vnd.oci.image.config.v1+json\",\n"
    "    \"size\": 0,\n"
    "    \"digest\": \"sha256:placeholder\"\n"
    "  },\n"
    "  \"layers\": [\n"
    "    {\n"
    "      \"mediaType\": \"application/vnd.oci.image.layer.v1.tar+gzip\",\n"
    "      \"size\": 0,\n"
    "      \"digest\": \"sha256:placeholder\"\n"
    "    }\n"
    "  ],\n"
    "  \"annotations\": {\n"
    "    \"org.opencontainers.image.title\": \"${CWI_PROJECT_NAME}\",\n"
    "    \"org.opencontainers.image.version\": \"${CWI_VERSION}\",\n"
    "    \"org.opencontainers.image.created\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\n"
    "    \"org.opencontainers.image.source\": \"${CMAKE_SOURCE_DIR}\",\n"
    "    \"org.opencontainers.image.description\": \"Container built from CPack output\"\n"
    "  }\n"
    "}\n"
  )
  
  project_log(STATUS "Generated container workflow files:")
  project_log(STATUS "  Properties: ${PROPERTIES_FILE}")
  project_log(STATUS "  Commands: ${COMMANDS_FILE}")  
  project_log(STATUS "  Manifest: ${MANIFEST_FILE}")
  project_log(STATUS "Run generated script: bash ${COMMANDS_FILE}")
endfunction()

# ~~~
# Configure CPack for container-ready output.
#
# This function applies container-friendly settings to CPack configuration
# without changing the core export_cpack functionality. It can be called
# alongside or instead of export_cpack for container-specific scenarios.
#
# API:
#   configure_cpack_for_containers([FORCE_TGZ])
#
# Parameters:
#   FORCE_TGZ - Force TGZ generator even if other generators are configured
#
# Effects:
#   - Ensures TGZ generator is available (required for container import)
#   - Enables component-based installation by default
#   - Sets container-friendly file naming
# ~~~
function(configure_cpack_for_containers)
  set(options FORCE_TGZ)
  cmake_parse_arguments(CCFC "${options}" "" "" ${ARGN})
  
  project_log(VERBOSE "Configuring CPack for container workflows")
  
  # Ensure TGZ generator is available
  get_property(current_generators GLOBAL PROPERTY CPACK_GENERATOR)
  if(CCFC_FORCE_TGZ OR NOT current_generators)
    set(CPACK_GENERATOR "TGZ" CACHE STRING "CPack generators" FORCE)
    project_log(VERBOSE "Set CPack generator to TGZ for containers")
  elseif(NOT "TGZ" IN_LIST current_generators)
    list(APPEND current_generators "TGZ")
    set(CPACK_GENERATOR "${current_generators}" CACHE STRING "CPack generators" FORCE)
    project_log(VERBOSE "Added TGZ generator for containers")
  endif()
  
  # Enable component-based packaging (creates separate tarballs)
  set(CPACK_ARCHIVE_COMPONENT_INSTALL ON CACHE BOOL "Component-based archive install" FORCE)
  project_log(VERBOSE "Enabled component-based packaging")
  
  # Set container-friendly naming
  if(NOT DEFINED CPACK_PACKAGE_FILE_NAME)
    set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-${CMAKE_SYSTEM_NAME}" 
        CACHE STRING "CPack package file name" FORCE)
  endif()
  
  project_log(VERBOSE "Container-ready CPack configuration complete")
endfunction()

# ~~~
# Print container workflow usage information.
#
# This function displays helpful information about using the generated
# container files and common workflow patterns.
# ~~~
function(container_workflow_usage)
  if(NOT COMMAND project_log)
    return()
  endif()
  
  project_log(STATUS "=== Container Workflow Usage ===")
  project_log(STATUS "After building with CPack:")
  project_log(STATUS "  1. Run generated import script:")
  project_log(STATUS "     bash ${CMAKE_BINARY_DIR}/container-commands.sh")
  project_log(STATUS "  2. Or import manually:")
  project_log(STATUS "     podman import --change \"CMD ['/usr/local/bin/app']\" package.tar.gz app:latest")
  project_log(STATUS "  3. Test containers:")
  project_log(STATUS "     podman run --rm app:latest")
  project_log(STATUS "See: ${CMAKE_BINARY_DIR}/container.properties for build info")
  project_log(STATUS "===============================")
endfunction()